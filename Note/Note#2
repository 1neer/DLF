이번 3,4주차에서는 복잡한 계산 그래프를 미분하고, 지금까지 만든 프레임워크를 패키지화 하는 과정을 진행하였다.

먼저 순전파, 역전파등을 가변 길이 인수로 변경하는 작업을 진행하였다.
가변 길이란 인수 또는 반환값의 수가 달라질 수 있다는 것을 의미하고, 처리는 여러개의 변수를 입력받는 함수를 만들어 처리한다.
표현은 변수들을 리스트에 넣어 처리하고, 인수와 반환값의 타입을 리스트로 바꾸고, 필요한 변수들을 리스트에 넣는다.

먼저 __call__ 메서드를 변경해 자신을 creater로 셋팅하게 하고, Add클래스와 Exp클래스 같이 인수와 반환값을 가지고있는 메서드들을 전부
가변 길이 인수로 변경해주는 작업을 거친다.

또한 개선 사항으로 리스트를 거치지 않고 인수와 결과를 직접 주고받도록 변경하고, Forward 메서드의 코드를 입력도 변수로 받고, 결과도 변수로 반환한다.
또한 Funtion 클래스를 수정하여 리스트 언팩을 사용하고, 반환값이 튜플이 아닌 경우 튜플로 변경해 주는 과정을 추가한다.

위와 같은 과정을 역전파 부분에도 똑같이 적용시켜준다.
이때 다변수 함수의 개념을 이용해 함수가 여러개의 변수에 대응할 수 있도록 수정한다.
output에 담겨있는 미분값들을 리스트에 포함시키고, 역전파로 전파되는 미분값을 Variable의 인스턴스 변수 grad에 저장한다.

다음으로는 같은 변수를 반복해서 사용할 시 전파되는 미분값이 덮어 써지는 문제점이 생긴다.
이를 해결하기 위해 미분값을 처음 설정하는 경우에는 풀력에서 전해지는 미분값을 그대로 대입하고,
처음 이후 부터는 전달된 미분값을 더해주도록 수정한다.
그 후 Variable 클래스에 미분값을 초기화하는 cleargrad메서드를 추가해준다.

그리고 지금까지는 일직선 계산 그래프의 미분 계산만 다루었지만, 실제로는 복잡하게 연결된 계산 그래프으 미분 계산이 필요하다.
하지만 지금까지 만든 DeZero에서는 함수 처리 순서가 D,C,A,B,A가 되어, C다음에 바로 A로 이어지고, 함수 A의 역전파가 두번 일어난다.
원인으로는 리스트에서 함수를 꺼내 처리하는 순서를 고려하지 않았기 때문이다. 그러므로 함수의 우선 순위를 정하는것이 필요하다.
때문에 순전파시 세대를 추가해주고, 입력변수가 둘 이상이라면, 가장 큰 generation수를 선택하도록 한다. 그 후 역전파시에 세대순으로
함수를 꺼내도록 설정한다.

다음으로는 메모리관리를 통해 프레임 워크의 성능을 개선한다. 이는 참조 카운터를 통해 개선하는데, 참조중에서도 약한 참조를 통해 개선한다.
이는 for문이 두 번쨰 반복될 때 x와 y가 덮어써지고, 사용자는 이전의 계산 그래프를 더 이상 참조하지 않게된다.
또한 필요없는 미분값을 삭제함으로써 메모리를 절약한다.

그리고 패키지화를 진행하기 위해 Config 클래스를 만들어 이를 활용해 모드 전환을 제어한다.
다음으로는 변수들을 서로 구분하고 연산자 오버로드를 통해 Variable클래스를 더욱 쉽게 사용하도록 한다.
그 다음을 지금까지의 프레임 워크를 패키지화 하여 py파일로 저장한뒤 코어 클래스로 옮긴다.


